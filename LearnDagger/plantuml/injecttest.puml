@startuml

hide empty members
hide empty fields
interface Pump{
    + void pump()
}

interface Heater{
    + void on();
    + void off();
    + boolean isHot();
}

interface PumpComponent{
    +Thermosiphon getPump()
}

class ElectricHeater

class Thermosiphon{
    ~ ElectricHeater heater
    + void pump()
}
class CoffeeApp #red

class DaggerPumpComponent #PaleGreen{
    + static Builder builder()
    + static PumpComponent create()
    + Thermosiphon getPump()
    - Thermosiphon injectThermosiphon(Thermosiphon instance)
}
class Builder #PaleGreen{
    + PumpComponent build()
}
interface Provider<T> #PaleGreen{
    + T get();
}
interface Factory<T> #PaleGreen
interface MembersInjector<T> #PaleGreen{
    + void injectMembers(T instance)
}

class ElectricHeater_Factory<ElectricHeater> #PaleGreen
class Thermosiphon_Factory<Thermosiphon> #PaleGreen
class Thermosiphon_MembersInjector #PaleGreen{
    + static MembersInjector<Thermosiphon> create(Provider<ElectricHeater> heaterProvider)
    + injectMembers(Thermosiphon instance)//实现接口的方法
    + static void injectHeater(Thermosiphon instance, ElectricHeater heater)//通过该静态方法注入
}

Thermosiphon_Factory ..> Thermosiphon
Thermosiphon_Factory --> Provider: ElectricHeater
Thermosiphon_Factory ..|> Factory
Thermosiphon_MembersInjector --> Provider: ElectricHeater
Thermosiphon_MembersInjector .up.|> MembersInjector
ElectricHeater_Factory ..|> Factory
Factory --|> Provider
ElectricHeater_Factory ..> ElectricHeater
DaggerPumpComponent ..> ElectricHeater
DaggerPumpComponent .right.> Thermosiphon_MembersInjector
DaggerPumpComponent .right.> Thermosiphon_Factory
Builder ..> DaggerPumpComponent
DaggerPumpComponent ..|> PumpComponent
CoffeeApp ..> Builder
ElectricHeater ..right|> Heater
Thermosiphon --|> Pump
PumpComponent ..> Thermosiphon
Thermosiphon -up-> ElectricHeater
@enduml